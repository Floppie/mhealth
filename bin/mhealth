#!/bin/bash

# mhealth Linux server monitoring system
mhealthVersion="mhealth Linux monitoring tool version 1.0"

# Handle our lockfile
# To be improved in v2
lockfile=/tmp/mhealth.lockfile


# If there is no lockfile - then there are no worries, if there is, let's check it out
if [ -f $lockfile ]; then 
	# Get the pid out of the lockfile
	pid=$(cat $lockfile);
	# See if that pid is still active
	pidAlive=$(kill -0 $pid > /dev/null 2>&1 && echo 1 || echo 0)
	# If that pid is not active - then no worries, if it is, is it still owned by mhealth?
	if [ $pidAlive -eq 1 ]; then 
		# Get the name of the pid
		pidName=$(cat /proc/$pid/cmdline);
		# if the pid is owned by mhealth, let's quit.
		if [[ "$pidName" =~ "mhealth" ]]; then
			echo "mhealth already running";
			exit 1;
		fi;
	fi;
fi;

# Make us a lockfile
echo $$ > $lockfile

#################
#               #
#   Variables   #
#               #
#################

if [ -f /etc/mhealth ]; then
	source '/etc/mhealth'
else
	# SNMP trap receiver settings
	trapReceiver="";
	trapCommunity="";
	trapVersion="";
fi;	

# This is the default test set that we will run if one is not specified
testSetDir="/var/mhealth/test-sets"
testdir="${testSetDir}/default";
# This is where we will leave our logs, one log per test
logdir="/var/log/mhealth"
# This is the name of the file we're going to record the problem list into
problemList="${testdir}/problemList"
# This is the file where we store the number of problems found when this test set ran
problemCount="${testdir}/problemCount";
warningCount="${testdir}/warningCount";
# This is the file that our test scripts should populate with the text description of the problem found
problemDescFile="/tmp/mhealth.problemDesc";
# By default, do not clear the logs
clearLogs=0;
# By default, do not clear the results
clearResults=0;
# By default, do not show status
showStatus=0;
showAllStatus=0;
# By default, show status upon test completion
quiet=0;
run=0;

######### Trap specific variables:
OID1=".1.3.6.1.4.1.27207.2.2.2.0.1"
OID2=".1.3.6.1.4.1.27207.2.1.2.1.1.2"
OID3=".1.3.6.1.4.1.27207.2.1.2.1.1.3"
OID4=".1.3.6.1.4.1.27207.2.1.2.1.1.4"
OID5=".1.3.6.1.4.1.27207.2.1.2.1.1.5"

#################
#               #
#   Functions   #
#               #
#################


function increment_warning()
{
	warning=$(cat $warningCount);
	(( warning++ ))
	echo "${warning}" > ${warningCount};
}

function decrement_warning()
{
	warning=$(cat $warningCount);
	(( warning-- ))
	echo "${warning}" > ${warningCount};
}

function increment_problem()
{
	problem=$(cat $problemCount);
	(( problem++ ))
	echo "${problem}" > ${problemCount};
}

function decrement_problem()
{
	problem=$(cat $problemCount);
	(( problem-- ))
	echo "${problem}" > ${problemCount};
}

function clear_results()
{
	echo "--- Clearing results files for all tests";
	for test in $(ls ${testdir}); do
		if [ -f ${testdir}/${test}/result ]; then 
			echo "+++ rm -f ${testdir}/${test}/result"
			rm -f ${testdir}/${test}/result
		fi;
	done;
	deletestuff="${warningCount} ${problemCount} ${problemList} ${testdir}/lastRun";
	echo "+++ rm ${deletestuff}";	 
	rm ${deletestuff} ;
	echo "=== All result files removed. Exiting without running tests."; 
}

function clear_logs()
{
	echo "--- Clearing logs for all tests from ${logdir} ";
	rm -f ${logdir}/*
	echo "=== Cleared all logs. Exiting without running tests.";
}

function show_status()
{
	if [ -f $problemCount ]; then 
		echo ""
		echo "Test set: ${testdir}";
		echo "Last run: $(date -d @$(cat ${testdir}/lastRun))";
		echo ""
		echo "Problem count:  $(cat $problemCount)"
		echo "Warning count:  $(cat $warningCount)"
		cat $problemList;
		echo ""
	else 
		echo "Cannot show status: mhealth has not run yet."
		exit 1;
	fi;
}

function usage() {
	echo $mhealthVersion;
	echo "";
    echo -e "This utility allows a Linux Administrator to batch run a set of tests on a server.";
    echo -e "";
    echo -e "Usage:";
    echo -e "   $0 [<option> [...]]";
    echo -e "";
    echo -e "<option> may be one of:";
    echo -e "   --help            | Show this help and exit.";
    echo -e "   --clear-results   | Reset all results files and exit.";
    echo -e "   --clear-logs      | Reset all log files and exit.";
    echo -e "   --clear-all       | Reset all results and exit.";
	echo -e "   --show-status     | Show the current status overview of the mhealth test results and exit.";
	echo -e "   --show-all-status | Show the status for each test set.";
	echo -e "   --test-set [dir]  | Run using the test/result set in [dir]";
	echo -e "   --run             | Run the tests.";
	echo -e "   --quiet           | Do not show status after running tests";
	echo ""
	echo " Examples:";
	echo "   # Run the default test set and do not show the results:"
	echo "       $0 --run --quiet"
	echo "   # Run the intense test set:"
	echo "       $0 --run --test-set intense"
	echo "   # Show the results from the intense test set and exit:"
	echo "       $0 --run --test-set intense --show-results"
}


##################################
#                                #
#          Run tests             #
#                                #
##################################


function run_tests() {
# Pre checks to see if we're ready

# Logging directory exists?
mkdir -p ${logdir}

# Does the problemCount file exist?
if [ ! -f ${problemCount} ]; then 
	echo 0 > ${problemCount};
fi;

# Does the warningCount file exist?
if [ ! -f ${warningCount} ]; then 
	echo 0 > ${warningCount};
fi;

# Get our active problem list file ready
echo "" > ${problemList}

# Do the tests
date +%s > ${testdir}/lastRun
for test in $(ls ${testdir}); do
	if [ -f ${testdir}/${test}/test ]; then
		# Make sure that the problemDescFile does not already exist - it should only come into existance if there was a problem
		rm -f $problemDescFile;
		# Declare our log
		testlog="${logdir}/${test}.log";
		echo "=== $(date "+%Y-%m-%d %R") Starting test ${test}" >> ${testlog} ;
		# Here we actually do the test
		${testdir}/${test}/test >> ${testlog} 2>&1
		result=$?
		echo ${result} >> ${testlog}
	
		# Here we check for if this is the first time this test has ever run
		if [ -f ${testdir}/${test}/result ]; then 
			# Since we do have a result file already, let's check if the result has changed since the last time the test ran
			previousResult=$(cat ${testdir}/${test}/result);
			if [ ${result} -ne ${previousResult} ]; then 
				# If the result is different from before, and it's now bad, increment our problem counter
				if [ $result -ne 0 ]; then 
					case ${result} in
						2)
						increment_warning;
						;;
						1)
						increment_problem;
						;;
						*)
						;;
					esac;
				# Alternatively, if the result is different from before, and it's now good, decrement our counter
				elif [ $result -eq 0 ]; then
					case ${previousResult} in
						1)
						decrement_problem;
						;;
						2)
						decrement_warning;
						;;
						*)
						;;
					esac;
				fi;
			fi;
		# And if it has not run before, and the result we have now is bad, increment a counter
		else
			case ${result} in
				2)
				increment_warning;
				;;
				1)
				increment_problem;
				;;
				*)
				;;
			esac;
		fi;

		# Handle writing the problem/warning description to the list file
		if [ -f "${problemDescFile}" ]; then 
			case ${result} in
				2)
				pType="WARNING";
				;;
				1)
				pType="PROBLEM";
				;;
				*)
				pType="NULL";
				;;
			esac;
			echo "$(date "+%Y-%m-%d %R") ::: ${pType}:${test} ::: $(cat ${problemDescFile})" >> ${problemList};
		fi;
		
		# Log our result for the next time we run this test
		echo ${result} > ${testdir}/${test}/result

		# Send a trap if we're configured for it and have something to say
		if [ -f "${problemDescFile}" ] && [ "${trapReceiver}" != "" ]; then 
			snmptrap -v${trapVersion} -c${trapCommunity} ${trapReceiver} '' $OID1 $OID2 s 'mhealth' $OID3 s '' $OID4 i 1 $OID5 s "$(cat ${problemDescFile})"; 
		fi;

	fi;
done;
}

# Process our switches
while [ 1 ]; do
    if [ -z "$1" ]; then
        break;
    fi;

    SHOW_HELP=0;
    PARAMETER="$1";
    shift;

    case "$PARAMETER" in
        "--help")
			usage;
			exit 1;
            ;;
        "--clear-results")
            clearResults=1;
            ;; 
        "--clear-logs")
            clearLogs=1;
            ;; 
		"--clear-all")
            clearResults=1;
            clearLogs=1;
			;;
		"--show-status")
			showStatus=1
			;;
		"--show-all-status")
			showAllStatus=1
			;;
		"--test-set")
			newtestdir="$1";
			if [ -d "${testSetDir}/${newtestdir}" ] && [ "${newtestdir}" != "" ]; then
				testdir="${testSetDir}/${newtestdir}";
				problemList="${testdir}/problemList"
				problemCount="${testdir}/problemCount";
				warningCount="${testdir}/warningCount";
				echo "working directory set to ${testdir}";
			else
				echo "Invalid set name supplied for '--test-set' option: ${newtestdir}";
				echo "Valid options are: $(ls -m ${testSetDir})";
				exit 1;
			fi;
			shift;
			;;
		"--run")
			run=1
			;;
		"--quiet")
			quiet=1;
			;;
        *)
			usage;
			exit 1;
            ;;
    esac;
done;

##############################################
#                                            #
# Take any actions specified by our switches #
#                                            #
##############################################

if [ ${showAllStatus} = 1 ]; then 
	echo $mhealthVersion;
	for dir in $(ls ${testSetDir}); do
		if [ ${dir} != "example" ]; then 
			testdir="${testSetDir}/${dir}";
			problemList="${testdir}/problemList"
			problemCount="${testdir}/problemCount";
			warningCount="${testdir}/warningCount";
			show_status;
		fi;
	done;
	exit 0;
fi;

if [ ${showStatus} = 1 ]; then
	echo $mhealthVersion;
	show_status
	exit 0;
fi;

if [ ${clearResults} = 1 ]; then 
	clear_results
fi;

if [ ${clearLogs} = 1 ]; then
	clear_logs
fi;

if [ ${clearResults} = 1 ] || [ ${clearLogs} = 1 ]; then
	exit 0;
fi;

if [ ${run} = 1 ]; then 
	run_tests
	if [ ${quiet} = 0 ]; then 
		echo $mhealthVersion;
		show_status
	fi;
	exit 0;
fi;

usage
